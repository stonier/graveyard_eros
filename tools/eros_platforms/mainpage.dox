/**
\mainpage
\htmlinclude manifest.html

@section Overview

Eros platforms is a library of preconfigured cmake platform modules
that define various characteristics of your target platform. 

\section Arrangement

The library of cmake modules is grouped firstly according to platform
(aka family) and then by name (usually the platform tuple). 

\section Usage

These can be copied across to ${ROS_ROOT}/rosplatform.cmake and used
directly, or more easily configured via the <i>rosplatform</i> script
in eros_python_tools. 

@code
> rosrun eros_python_tools rosplatform --help

Usage: 
  rosplatform          : shows the currently set ros platform
  rosplatform clear    : clear the currently set ros platform
  rosplatform create   : create a user-defined platform configuration
  rosplatform delete   : delete a preconfigured platform
  rosplatform list     : list available eros and user-defined platforms
  rosplatform select   : select a preconfigured platform
  rosplatform validate : validate a preconfigured platform (n/a)

Options:
  -h, --help      show this help message and exit
  -v, --validate  when creating, attempt to validate the configuration
@endcode

@subsection Creating

New user-defined platform configurations can be created via the 
interactive '<i>rosplatform create</i>' command. This asks a few simple 
questions and then saves the platform configuration in the ros home dir
(usually /home/<username>/.ros/platforms).

Feel free to contact the developers if you wish to add yours to the
current eros_platforms package library or modify/correct an existing one.
 
\section Anatomy
 
Each platform provides the necessary cmake variables for configuring
your platform and when installed using the 'rosplatform' tool, it will also
append it with default configuration variables for your build environment
that you can freely edit (or modify with other eros tools, e.g. build mode type).

- Make sure the cross-compiler is in your PATH
- By default, it will utilise only the sysroot's libs and headers. 
- Some extra variables are set for convenience that merely uniquely identify the platform

@code
PLATFORM_FAMILY : the platform/group the platform belongs to (e.g. crossdev||ubuntu etc).
PLATFORM_NAME : signature used for the cmake filename, by convention the cpu type.
PLATFORM_COMPILE_FLAGS : cpu specific compile flags that get integrated into ROS_COMPILE_FLAGS.
PLATFORM_LINK_FLAGS : cpu specific link flags that get integrated into ROS_COMPILE_FLAGS.
@endcode

To check in detail what's been configured, track down the platform in the
eros_platforms package or your ros home (i.e. /home/<username>/.ros/platforms) and
check out the contents. If it is the currently set platform, you can
edit $ROS_ROOT/rosplatform.cmake for minor (temporary) modifications.

\section Platforms

The following is a list of currently preconfigured eros platforms.

- generic/vanilla.cmake
- generic/native.cmake
- arm/arm1176jzf-s.cmake
- intel/core2.cmake
- intel/i5.cmake
- intel/atomn270.cmake
- intel/atom330.cmake

*/
