--- Makefile	2011-01-20 08:08:51.399098844 +0900
+++ ../Makefile	2011-01-19 18:19:46.088463919 +0900
@@ -3,35 +3,58 @@
 # cmake.mk.
 #include $(shell rospack find mk)/cmake.mk
 
-# The all target does the heavy lifting, creating the build directory and
-# invoking CMake
+ifeq ($(MAKE),) 
+  MAKE=make
+endif	
+
+# The all target does the heavy lifting. It does two passes - the first
+# includes a check for a toolchain, builds accordingly and if a cross
+# compile was detected it will then do a second pass to build the native
+# rospack/rosstack tools.
 all:
-	@mkdir -p build
+	@rm -f cross_compiled
 	-mkdir -p bin
-	@if ! (cd build && cmake ..); then \
-	  echo "[rosbuild] CMake failed; trying to clean and start over"; \
-	  make clean; \
-	  mkdir -p build; \
-	  cd build && cmake ..; \
+	@mkdir -p build/first_pass
+	@mkdir -p build/second_pass
+	@if ! (cd build/first_pass && cmake -DCMAKE_TOOLCHAIN_FILE=$(ROS_ROOT)/core/rosbuild/rostoolchain.cmake ../..); then \
+  		echo "[rosbuild] CMake failed; trying to clean and start over"; \
+  		rm -f cross_compiled; rm -f build/first_pass; \
+  		mkdir -p build/first_pass; \
+  		cd build/first_pass && cmake -DCMAKE_TOOLCHAIN_FILE=$(ROS_ROOT)/core/rosbuild/rostoolchain.cmake ../..; \
+	fi
+	cd build/first_pass && $(MAKE) $(ROS_PARALLEL_JOBS)
+	@if [ -f ./cross_compiled ]; then \
+		if ! (cd build/second_pass && cmake -DHOST_TOOLS:BOOL=ON ../..); then \
+			echo "[rosbuild] CMake failed; trying to clean and start over"; \
+			rm -rf build/second_pass; \
+			mkdir -p build/second_pass; \
+			cd build/second_pass && cmake -DHOST_TOOLS:BOOL=ON ../..; \
+		fi; \
+		cd build/second_pass && $(MAKE) $(ROS_PARALLEL_JOBS); \
 	fi
-	cd build && make $(PARALLEL_JOBS)
 
 install: all
-	cd build && make install
+	cd build/first_pass && $(MAKE) install
+	@if [ -f ./cross_compiled ]; then \
+		cd build/second_pass && $(MAKE) install; \
+	fi
 
 # The clean target blows everything away
 clean:
-	-cd build && make clean
-	rm -rf build
+	-cd build/first_pass && $(MAKE) clean
+	-cd build/second_pass && $(MAKE) clean
+	rm -rf build cross_compiled
 
+# These don't actually have anything to do yet.
 test: all
-	if cd build && make -k $@; then make test-results; else make test-results && exit 1; fi
+	if cd build/first_pass && $(MAKE) -k $@; then $(MAKE) test-results; else $(MAKE) test-results && exit 1; fi
+
 tests: all
-	cd build && make $@
+	cd build/first_pass && $(MAKE) $@
 test-future: all
-	cd build && make -k $@
+	cd build/first_pass && $(MAKE) -k $@
 gcoverage: all
-	cd build && make $@
+	cd build/first_pass && $(MAKE) $@
 
 #SRC = main.cpp
 #LIBSRC = rospack.cpp \
